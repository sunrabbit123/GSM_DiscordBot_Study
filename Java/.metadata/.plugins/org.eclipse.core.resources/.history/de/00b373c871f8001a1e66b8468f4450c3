package com.github.sunrabbit123.JavaBot;

import java.awt.Color;
import java.io.IOException;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import org.javacord.api.DiscordApi;
import org.javacord.api.DiscordApiBuilder;
import org.javacord.api.entity.channel.TextChannel;
import org.javacord.api.entity.message.embed.EmbedBuilder;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;

public class Main {

	final static String token = "NzAwNjExMzg0OTk5NjczOTM2.XpldMg.EZ5a6LC0pdftpCdq2fH1ePyHl94";
	final static String prefix = "라이츄";
	final static String URL = "https://open.neis.go.kr/hub/mealServiceDietInfo?"
			+ "KEY=bfa95730b1b84b07b2db733b2138d9aa&pIndex=1&pSize=100" + "&ATPT_OFCDC_SC_CODE=F10"
			+ "&SD_SCHUL_CODE=7380292";

	public static void main(String[] args) {
		DiscordApi api = new DiscordApiBuilder().
							setToken(token).
							login().
							join();
		
		CheckTime ckt = new CheckTime(api);
		Thread th = new Thread(ckt);
		th.start();

		System.out.println("Logged in!");
		api.updateActivity("라이츄츄츄츄릅");

		api.addMessageCreateListener(ev -> {

			EmbedBuilder embed = new EmbedBuilder();// 임베드 생성
			
			String msg = ev.getMessage().getContent();
			String userName = ev.getMessageAuthor().getName();
			TextChannel Ch = ev.getChannel();

			if (msg.startsWith(prefix)) {
				if (msg.contains("fkdlcb")) {
					Ch.sendMessage("라이츄는 한글밖에 모르는걸요!");
				} else if (msg.contains("굴러")) {
					int RandomNum = (int) (Math.random() * 100);
					switch (RandomNum % 3) {
					case 1:
						Ch.sendMessage("데구르르 데굴");
						break;
					case 2:
						Ch.sendMessage("데구르르 데구르");
						break;
					case 3:
						Ch.sendMessage("라이츄를 불러오는 중입니다....\n로딩중....");
						break;
					}
				} else if (msg.contains("주사위")) {
					int Rnum = (int) (Math.random() * 10) % 7;
					Ch.sendMessage("데구르르.... ");
					Ch.sendMessage("또르르르....");
					Ch.sendMessage(Rnum + "입니다..!");

				} else if (msg.contains("급식") || msg.contains("아침") || msg.contains("조식") || msg.contains("점심") || msg.contains("중식") || msg.contains("석식") || msg.contains("저녁")) {
					Document doc = null;
					Calendar cal = Calendar.getInstance();
					
					int year = cal.get(cal.YEAR);
					int month = cal.get(cal.MONTH) + 1;
					int date = cal.get(cal.DATE);
					if(msg.contains("내일")) {
						date++;
					}
					String YMD = "&MLSV_YMD=";
					if (month < 10) {
						YMD +=  year + "0" + month + date;
					}else {
						YMD += year + month + date;
					}
					String URLS = URL + YMD;
					//URL 계산
					
					try {
						doc = Jsoup.connect(URLS).get();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					String doctext = doc.text();
					doctext = doctext.replace("쌀 : 국내산<br/>김치류 : 국내산<br/>고춧가루(김치류) : 국내산<br/>쇠고기(종류) : 국내산(한우)<br/>돼지고기 : 국내산<br/>닭고기 : 국내산<br/>오리고기 : 국내산<br/>쇠고기 식육가공품 : 국내산<br/>돼지고기 식육가공품 : 국내산<br/>닭고기 식육가공품 : 국내산<br/>오리고기 가공품 : 국내산<br/>낙지 : 국내산<br/>고등어 : 국내산<br/>갈치 : 국내산<br/>오징어 : 국내산<br/>꽃게 : 국내산<br/>참조기 : 국내산<br/>콩 : 국내산 ", "");
					
					String mill = null;
					if(msg.contains("아침") || msg.contains("조식")) {
						mill = doctext.substring(doctext.lastIndexOf("조식"), doctext.lastIndexOf("중식"));
						
					}else if(msg.contains("점심") || msg.contains("중식")){
						mill = doctext.substring(doctext.lastIndexOf("중식"), doctext.lastIndexOf("석식"));
						
					}else if(msg.contains("석식") || msg.contains("저녁")) {
						mill = doctext.substring(doctext.lastIndexOf("석식"));
						
					}else {
						int hour = cal.get(Calendar.HOUR_OF_DAY);
						if(hour >= 8 && hour <= 13) {
							mill = doctext.substring(doctext.lastIndexOf("중식"), doctext.lastIndexOf("석식"));
						}else if(hour >= 13 && hour <= 19) {
							mill  = doctext.substring(doctext.lastIndexOf("석식"));
						}else {
							mill = doctext.substring(doctext.lastIndexOf("조식"), doctext.lastIndexOf("중식"));
						}
						
					}
					mill = mill.split(" ")[3];
					mill = mill.replaceAll("[0-9a-zA-Z.(g):/]", "");
					mill = mill.replaceAll("[*]", "");
					System.out.println(mill);
					
					
					
					
					String[] millList = mill.split("   ");
					System.out.println(Arrays.toString(millList));
					mill = millList[0].replaceAll("<>", "\n");
					
					
					embed.setTitle(year + "년 " + month + "월 " + date + "일")
							.setColor(Color.RED)
							.setFooter(userName, ev.getMessageAuthor().getAvatar())
							.setTimestamp(new Date().toInstant())
							.addField("급식", mill);
					
//					for(int i = 0; i < millList.length; i++) {
//						try{
//							embed.addField((i+1) + "번째 메뉴", millList[i], false);
//						}catch ( Exception e ) {
//							System.out.println(e);
//						}
//						
//					}
					Ch.sendMessage(embed);
					System.out.println(Arrays.toString(millList));
					System.out.println(URLS);
				}

			}
		});
	}

}

class CheckTime implements Runnable {
	DiscordApi api;
	boolean checked = false;
	String targetTime = "16:33:00";

	public CheckTime(DiscordApi api) {
		this.api = api;
	}

	public void run() {
		while (true) {
			SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
			Date time = new Date();
			String tm = format.format(time);

//            if (tm.equals(targetTime)) {
//                api.getTextChannelById("719449629963452449").get().sendMessage("테스트인거예요! " + tm + "이 되어서 메시지를 보냈어요!");
//            }
		}
	}
}
